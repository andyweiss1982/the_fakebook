{"version":3,"sources":["contexts/UserContext.js","components/Navbar.js","components/Auth.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","UserProvider","props","storedUser","JSON","parse","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","user","setUser","react_default","a","createElement","Provider","value","signIn","setItem","stringify","signOut","removeItem","children","Navbar","_useContext","useContext","src","picture","thumbnail","alt","id","email","onClick","Auth","fetch","then","response","json","data","results","Profile","name","first","last","large","className","gender","dob","age","location","city","state","phone","registered","App","UserContext_UserProvider","components_Navbar","components_Auth","components_Profile","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51388840.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\n\nconst UserContext = createContext()\n\nconst UserProvider = props => {\n  const storedUser = JSON.parse(localStorage.getItem(\"user\"))\n  const [user, setUser] = useState(storedUser)\n\n  const signIn = user => {\n    setUser(user)\n    localStorage.setItem(\"user\", JSON.stringify(user))\n  }\n\n  const signOut = () => {\n    setUser(null)\n    localStorage.removeItem(\"user\")\n  }\n\n  return(\n    <UserContext.Provider value={{user, signIn, signOut}}>\n      { props.children }\n    </UserContext.Provider>\n  )\n}\n\nexport { UserContext, UserProvider }\n","import React, { useContext } from 'react'\nimport { UserContext } from '../contexts/UserContext'\n\nconst Navbar = () => {\n  const { user, signOut } = useContext(UserContext)\n\n  return(\n    <header>\n      <nav>\n        <h1>FakeBook</h1>\n        {\n          user &&\n          <ul>\n            <li>\n              <img\n                src={user.picture.thumbnail}\n                alt=\"profile-pic\"\n                id=\"nav-profile-pic\"\n              />\n            </li>\n            <li>\n              <span id=\"nav-email\">{user.email}</span>\n            </li>\n            <li>\n              <button id=\"sign-out\" onClick={signOut}>\n                Sign Out\n              </button>\n            </li>\n          </ul>\n        }\n      </nav>\n    </header>\n  )\n}\n\nexport default Navbar\n","import React, { useContext } from 'react'\nimport { UserContext } from '../contexts/UserContext'\n\nconst Auth = props => {\n  const { user, signIn } = useContext(UserContext)\n\n  const authenticate = () => {\n    fetch('https://randomuser.me/api/?nat=us')\n      .then(response => response.json())\n      .then(data => signIn(data.results[0]))\n  }\n\n  if (user) return props.children\n  return (\n    <main>\n      <h1>Welcome to FakeBook</h1>\n      <button onClick={authenticate}>\n        Sign In\n      </button>\n    </main>\n  )\n}\n\nexport default Auth\n","import React, { useContext } from 'react'\nimport { UserContext } from '../contexts/UserContext'\n\nconst Profile = () => {\n  const { user } = useContext(UserContext)\n  return(\n    <main id=\"profile\">\n      <h1>{user.name.first} {user.name.last}</h1>\n      <img src={user.picture.large} alt=\"profile\" className=\"profile-pic\"/>\n      <table>\n        <tbody>\n          <tr><td>{user.email}</td></tr>\n          <tr><td>{user.gender}</td></tr>\n          <tr><td>{user.dob.age}</td></tr>\n          <tr><td>{user.location.city }, {user.location.state}</td></tr>\n          <tr><td>{user.phone}</td></tr>\n          <tr><td>Registered {user.registered.age} years ago</td></tr>\n        </tbody>\n      </table>\n    </main>\n  )\n}\n\nexport default Profile\n","import React from 'react'\nimport { UserProvider } from './contexts/UserContext'\nimport Navbar from './components/Navbar'\nimport Auth from './components/Auth'\nimport Profile from './components/Profile'\n\nconst App = () => (\n  <UserProvider>\n    <Navbar />\n    <Auth>\n      <Profile />\n    </Auth>\n  </UserProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}